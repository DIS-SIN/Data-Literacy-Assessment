{"version":3,"sources":["helpers.js","components/Survey.js","components/Persona.js","Home.js","dictionaries/en.js","App_EN.js","dictionaries/fr.js","App_FR.js","serviceWorker.js","index.js","content/en/Introduction.md","content/fr/Introduction.md"],"names":["markdownFile","updateState","a","fetch","text","Survey","props","model","SurveyJS","SurveyJSON","onClick","startSurvey","t","onComplete","result","setSurveyResults","results","survey","questions","console","log","pages","forEach","page","concat","elements","getQuestionArray","answer","question","find","q","name","type","choices","indexOf","getSurveyScores","data","toJSON","Persona","useState","persona","setPersona","useEffect","surveyResults","found","personas","skill","skills","includes","score","level","dataLiteracyLevels","min","max","title","findPersonaBackup","findPersona","Home","startedSurvey","intro","setIntro","getMarkdown","className","password","background","image","Fragment","source","theme","App_EN","dictionary","Introduction","App_FR","Boolean","window","location","hostname","match","document","documentElement","lang","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message","module","exports"],"mappings":"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","file":"static/js/main.00e66aaa.chunk.js","sourcesContent":["export async function getMarkdown(markdownFile, updateState) {\n    markdownFile = await fetch(markdownFile);\n    markdownFile = await markdownFile.text();\n    updateState(markdownFile);\n}","import React from 'react';\nimport * as SurveyJS from \"survey-react\";\nimport SurveyJSON from '../content/survey.json';\nimport \"survey-react/survey.css\";\nimport './Survey.css';\n\nexport default function Survey(props) {\n\n    var model = new SurveyJS.Model(SurveyJSON);\n\n    function onComplete(result) {\n        props.setSurveyResults(getSurveyScores(result.data, result.toJSON()));\n    }\n\n    function getQuestionArray(survey) {\n        console.log(survey);\n        let questions = [];\n        survey.pages.forEach(page => {\n            questions = questions.concat(page.elements);\n        });\n        return questions;\n    }\n    \n    function getSurveyScores(results, survey) {\n\n        let questions = getQuestionArray(survey);\n\n        for (let answer in results){\n\n            let question = questions.find(q => q.name === answer);\n\n            if (question.type === \"radiogroup\"){\n                results[answer] = question.choices.indexOf(results[answer]) + 1;\n            }\n\n        }\n\n        return results;\n    }\n\n    return (\n        <div>\n            <button onClick={() => props.startSurvey(false)}>{props.t[\"Restart\"]}</button>\n            <SurveyJS.Survey\n                model={model}\n                onComplete={onComplete}\n            />\n        </div>\n    );\n}","import React, { useState, useEffect } from 'react';\nimport personas from '../content/personas.json';\nimport dataLiteracyLevels from '../content/dataLiteracyLevels.json';\nimport './Persona.css';\n\nexport default function Persona(props) {\n\n    const [persona, setPersona] = useState(null);\n\n    useEffect(() => {\n        if (props.surveyResults){\n            findPersona();\n        }\n    },[props.surveyResults])\n\n    function findPersona() {\n        let found = personas.find(persona => {\n            for (let skill in persona.skills){\n                if (!persona.skills[skill].includes(props.surveyResults[skill])){\n                    return false;\n                }\n            }\n            return true\n        });\n        if (found){\n            setPersona(found);\n        }\n        else{\n            setPersona(findPersonaBackup());\n        }\n        \n    }\n\n    function findPersonaBackup() {\n\n        let score = 0;\n\n        for (let skill in props.surveyResults){\n            if (typeof(props.surveyResults[skill]) === \"number\"){\n                score += props.surveyResults[skill] - 1;\n            }\n        }\n\n        let level = dataLiteracyLevels.find(level => {\n            if (score >= level.score.min && score <= level.score.max){\n                return true;\n            }\n        })\n\n        return {\n            title: `Backup weighting used: You are a ${level.title} with a score of ${score}`\n        }\n    }\n    \n\n    return (\n        <div>\n            {persona &&\n                <h1>{persona.title}</h1>\n            }\n        </div>\n    );\n}","import React, { useState, useEffect } from 'react';\nimport { GCFooter, GCHeader } from 'gc-tortilla';\nimport ChildLock from 'react-child-lock';\nimport ReactMarkdown from 'react-markdown';\nimport { getMarkdown } from './helpers';\nimport Survey from './components/Survey';\nimport Persona from './components/Persona';\nimport './Home.css';\n\n\n\nexport default function Home(props) {\n\n    const [startedSurvey, startSurvey] = useState(false);\n    const [intro, setIntro] = useState(null);\n    const [surveyResults, setSurveyResults] = useState(null);\n\n    useEffect(() => {\n        setIntro(getMarkdown(props.intro, setIntro));\n    },[]);\n\n    console.log(surveyResults);\n\n    return (\n        <div className=\"home\">\n            <ChildLock password=\"beta\" background={{image: \"https://images.unsplash.com/photo-1451187580459-43490279c0fa?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=2252&q=80\"}}/>\n            <GCHeader/>\n            {!surveyResults &&\n                <React.Fragment>\n                    {!startedSurvey &&\n                        <div>\n                            <ReactMarkdown source={intro}/>\n                            <button onClick={() => startSurvey(true)}>{props.t[\"Start Assessment\"]}</button>\n                        </div>\n                    }\n                    {startedSurvey &&\n                        <Survey t={props.t} setSurveyResults={setSurveyResults} startSurvey={startSurvey}/>\n                    }\n                </React.Fragment>\n            }\n            {surveyResults &&\n                <Persona t={props.t} surveyResults={surveyResults}/>\n            }\n            <GCFooter theme=\"light\"/>\n        </div>\n    );\n}","export default {\n    \"getLocale\": \"en\",\n    \"getOppositeLocale\": \"fr\",\n    \"getOppositeLang\": \"Français\",\n    \"Start Assessment\": \"Start Assessment\",\n    \"Restart\": \"Restart\"\n}","import React, { useState, useEffect } from 'react';\nimport Home from './Home';\nimport dictionary from './dictionaries/en';\nimport Introduction from './content/en/Introduction.md';\n\nexport default function App_EN() {\n    return (\n        <Home t={dictionary} intro={Introduction}/>\n    );\n}\n","export default {\n    \"getLocale\": \"fr\",\n    \"getOppositeLocale\": \"en\",\n    \"getOppositeLang\": \"English\",\n    \"Start Assessment\": \"Commencer l'évaluation\",\n    \"Restart\": \"Redémarrer\"\n}","import React, { useState, useEffect } from 'react';\nimport Home from './Home';\nimport dictionary from './dictionaries/fr';\nimport Introduction from './content/fr/Introduction.md';\n\nexport default function App_FR() {\n    return (\n        <Home t={dictionary} intro={Introduction}/>\n    );\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App_EN from './App_EN';\nimport App_FR from './App_FR';\nimport * as serviceWorker from './serviceWorker';\n\nif (document.documentElement.lang === \"fr\"){\n    ReactDOM.render(\n        <React.StrictMode>\n          <App_FR />\n        </React.StrictMode>,\n        document.getElementById('root')\n      );\n}\nelse {\n    ReactDOM.render(\n        <React.StrictMode>\n          <App_EN />\n        </React.StrictMode>,\n        document.getElementById('root')\n      );\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/Introduction.e3b6896c.md\";","module.exports = __webpack_public_path__ + \"static/media/Introduction.f1e30137.md\";"],"sourceRoot":""}